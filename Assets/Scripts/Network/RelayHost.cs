// ============================================================================
// RELAY HOST - Unity Relay Networking Host Implementation
// ============================================================================
// This script handles the host-side creation and management of a Unity Relay session.
// The host is responsible for creating the relay allocation and providing the join code
// to clients who want to connect to the multiplayer game.
//
// HOST RESPONSIBILITIES:
// 1. Create a relay allocation (reserved server space on Unity's relay servers)
// 2. Generate a join code for clients to use
// 3. Configure the network transport to use the relay
// 4. Start hosting the game session
// 5. Handle connection failures and cleanup
//
// RELAY ALLOCATION PROCESS:
// Host -> Unity Relay Service -> Creates allocation -> Gets join code -> Starts hosting
// Clients use the join code to connect to the same allocation
// ============================================================================

using UnityEngine;
using Unity.Services.Relay;           // Core Unity Relay service API
using Unity.Services.Relay.Models;    // Data models for relay operations (Allocation, etc.)
using Unity.Netcode;                  // Unity's networking framework
using Unity.Netcode.Transports.UTP;   // Unity Transport Protocol - handles low-level networking
using Unity.Networking.Transport.Relay; // Relay-specific transport data structures
using System.Threading.Tasks;        // For async/await operations and timeout handling
using TMPro;                         // TextMeshPro for UI elements

// RelayHost handles creating and managing a Unity Relay session for multiplayer games.
// This is the host-side component that creates the relay allocation, generates a join code,
// and starts hosting the game session that clients can connect to.
public class RelayHost : MonoBehaviour
{
    // ============================================================================
    // UI AND CONFIGURATION
    // ============================================================================
    
    // UI Text component to display the join code to the host player.
    // This allows the host to see and share the join code with other players.
    [SerializeField] TextMeshProUGUI joinCodeDisplay;
    
    // The join code generated by Unity Relay Service that clients use to connect.
    // This is a 6-character alphanumeric string (e.g., "C86DGQ") that uniquely
    // identifies this relay allocation.
    [SerializeField] public string joinCode;
    
    // Display name for the host player in the multiplayer session.
    // This can be used for player identification and UI display purposes.
    [SerializeField] private string userName = "Host";

    // ============================================================================
    // LIFECYCLE MANAGEMENT
    // ============================================================================
    
    // Unity lifecycle method called when the GameObject is created.
    // Sets up event handlers for network transport failures to handle
    // connection issues gracefully.
    void Awake()
    {
        // Subscribe to transport failure events to handle connection issues
        // This allows us to detect when the relay connection is lost or fails
        if (NetworkManager.Singleton != null)
        {
            NetworkManager.Singleton.OnTransportFailure += HandleTransportFailure;
        }
    }

    // Unity lifecycle method called when the GameObject is destroyed.
    // Cleans up event handlers to prevent memory leaks and null reference exceptions.
    void OnDestroy()
    {
        // Unsubscribe from transport failure events to prevent memory leaks
        if (NetworkManager.Singleton != null)
        {
            NetworkManager.Singleton.OnTransportFailure -= HandleTransportFailure;
        }
    }

    // Handles network transport failures that occur during the relay session.
    // This method is called when the NetworkManager detects that the transport
    // layer has failed, which usually means the relay connection was lost.
    private void HandleTransportFailure()
    {
        Debug.LogError("Host: NetworkManager.OnTransportFailure event triggered! The Relay connection was likely lost or invalidated.");
        
        // Additional cleanup and recovery logic could be added here:
        // - Notify players about the connection loss
        // - Attempt to reconnect to the relay
        // - Clean up game state
        // - Shutdown the NetworkManager gracefully
        // 
        // Example recovery code:
        // if (NetworkManager.Singleton.IsHost)
        // {
        //     NetworkManager.Singleton.Shutdown();
        //     // Optionally attempt to recreate the relay session
        // }
    }

    // ============================================================================
    // RELAY HOST CREATION AND MANAGEMENT
    // ============================================================================
    
    // Main method to create and start a Unity Relay host session.
    // This method handles the complete host setup process:
    // 1. Creates a relay allocation (reserved server space)
    // 2. Generates a join code for clients
    // 3. Configures the network transport with relay server information
    // 4. Starts hosting the game session
    // 
    // The method includes timeout handling and comprehensive error management
    // to ensure robust operation even when network conditions are poor.
    [ContextMenu("Start Host With Relay")]
    public async void StartHostWithRelay()
    {
        try
        {
            // ============================================================================
            // STEP 1: CREATE RELAY ALLOCATION WITH TIMEOUT HANDLING
            // ============================================================================
            // CreateAllocationAsync requests a reserved server space on Unity's relay servers.
            // The parameter (5) specifies the maximum number of connections allowed.
            // This includes the host, so effectively 4 additional clients can connect.
            Debug.Log("Host: Requesting allocation from Unity Relay Service...");

            // Create the allocation request task
            var allocationTask = RelayService.Instance.CreateAllocationAsync(5);
            
            // Set up a timeout task to prevent indefinite waiting
            // 10 seconds should be sufficient for most network conditions
            var timeoutTask = Task.Delay(10000);

            // Wait for either the allocation to complete or timeout to occur
            var completedTask = await Task.WhenAny(allocationTask, timeoutTask);

            // Handle timeout scenario
            if (completedTask == timeoutTask)
            {
                Debug.LogError("Host: Relay allocation request timed out.");
                return;
            }

            // Handle allocation task failure
            if (allocationTask.IsFaulted)
            {
                // Check if it's a specific RelayServiceException for better error reporting
                if (allocationTask.Exception.InnerException is RelayServiceException relayEx)
                {
                    Debug.LogError($"Host: RelayServiceException during allocation: {relayEx.Message} (Reason: {relayEx.Reason})");
                }
                else
                {
                    Debug.LogError($"Host: Exception during allocation: {allocationTask.Exception.InnerException?.Message ?? allocationTask.Exception.Message}");
                }
                return;
            }

            // Successfully obtained the allocation
            Allocation alloc = allocationTask.Result;
            Debug.Log($"Host: Successfully allocated Relay server. Allocation ID: {alloc.AllocationId}");

            // ============================================================================
            // STEP 2: GENERATE JOIN CODE WITH TIMEOUT HANDLING
            // ============================================================================
            // The join code is a human-readable string that clients use to connect
            // to this specific relay allocation. It's generated from the allocation ID.
            Debug.Log("Host: Requesting join code...");
            var joinCodeTask = RelayService.Instance.GetJoinCodeAsync(alloc.AllocationId);
            timeoutTask = Task.Delay(10000);

            completedTask = await Task.WhenAny(joinCodeTask, timeoutTask);

            // Handle join code timeout
            if (completedTask == timeoutTask)
            {
                Debug.LogError("Host: Get join code request timed out.");
                return;
            }

            // Handle join code task failure
            if (joinCodeTask.IsFaulted)
            {
                if (joinCodeTask.Exception.InnerException is RelayServiceException relayEx)
                {
                    Debug.LogError($"Host: RelayServiceException getting join code: {relayEx.Message} (Reason: {relayEx.Reason})");
                }
                else
                {
                    Debug.LogError($"Host: Exception getting join code: {joinCodeTask.Exception.InnerException?.Message ?? joinCodeTask.Exception.Message}");
                }
                return;
            }

            // Successfully obtained the join code
            joinCode = joinCodeTask.Result;
            Debug.Log($"Host: Successfully retrieved join code: {joinCode}");

            // Update UI to display the join code to the host player
            if (joinCodeDisplay != null)
                joinCodeDisplay.text = joinCode;

            // ============================================================================
            // STEP 3: CREATE RELAY SERVER DATA
            // ============================================================================
            // RelayServerData contains all the information needed to configure
            // the network transport to use the relay server. This includes:
            // - Server IP and port (where the relay server is located)
            // - Allocation ID bytes (identifies this specific relay session)
            // - Connection data (authentication/encryption data for the host)
            // - Key (encryption key for secure communication)
            // - WebSocket flag (false = use UDP, true = use WebSockets)
            var serverData = new RelayServerData(
                alloc.RelayServer.IpV4,        // IP address of the relay server
                (ushort)alloc.RelayServer.Port, // Port number of the relay server
                alloc.AllocationIdBytes,       // Unique identifier for this relay session
                alloc.ConnectionData,          // Host-specific connection data
                alloc.ConnectionData,          // Same as connection data for host
                alloc.Key,                     // Encryption key for secure communication
                false // Using UDP instead of WebSockets for better performance
            );

            // ============================================================================
            // STEP 4: CONFIGURE NETWORK TRANSPORT
            // ============================================================================
            // Unity Transport Protocol (UTP) is the low-level networking system.
            // We configure it to use the relay server data instead of direct connections.
            // This tells the transport layer to route all network traffic through
            // the Unity Relay servers instead of trying to accept direct connections.
            var transport = NetworkManager.Singleton.GetComponent<UnityTransport>();
            transport.SetRelayServerData(serverData);

            // ============================================================================
            // STEP 5: START HOSTING
            // ============================================================================
            // This initiates the actual hosting process. The NetworkManager will:
            // 1. Use the configured transport to connect to the relay server
            // 2. Start accepting client connections through the relay
            // 3. Begin the host-side networking session
            NetworkManager.Singleton.StartHost();
            Debug.Log($"Host: Relay server started and listening. IP: {alloc.RelayServer.IpV4}, Port: {alloc.RelayServer.Port}");

            // The host is now ready to accept client connections!
            // Clients can use the join code to connect to this relay session.
        }
        catch (RelayServiceException e)
        {
            // Handle specific Unity Relay service exceptions
            // These usually indicate service-level issues like:
            // - Service unavailable
            // - Authentication problems
            // - Rate limiting
            // - Invalid parameters
            Debug.LogError($"Host: RelayServiceException: {e.Message}\nReason: {e.Reason}\n{e.StackTrace}");
        }
        catch (System.Exception e)
        {
            // Handle any other unexpected exceptions
            Debug.LogError($"Host: Relay host setup failed: {e.Message}\n{e.StackTrace}");
        }
    }

    // ============================================================================
    // UTILITY METHODS
    // ============================================================================
    
    // Copies the current join code to the system clipboard.
    // This allows the host to easily share the join code with other players
    // by copying it to their clipboard for pasting into messages, emails, etc.
    public void CopyJoinCode()
    {
        // Copy the join code to the system clipboard
        // This uses Unity's GUIUtility.systemCopyBuffer which works across platforms
        GUIUtility.systemCopyBuffer = joinCode;
        
        // Optional: Add user feedback
        Debug.Log($"Join code '{joinCode}' copied to clipboard!");
    }
}